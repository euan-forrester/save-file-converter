// There are two "styles" of save files that can be generated by a Mega SD:
// - The "old style" (from earlier firmware, it seems) which is byte expanded with 0xFF
// - The "new style" (from later firmware) which is not byte expanded and includes a "BUP2" prepended to the bgeinning
//
// I'm not sure which firmware revision changed this, nor do I know whether a Mega SD can read both types of files with the most recent firmware
//
// Here we will accept either type of file as input, and always output a "new style" file. This will allow people to use their
// old saves hopefully without making things complicated for the user.

import SaveFilesUtil from '../../../../util/SaveFiles';
import GenesisUtil from '../../../../util/Genesis';
import MathUtil from '../../../../util/Math';
import Util from '../../../../util/util';

const MAGIC = 'BUP2';
const MAGIC_OFFSET = 0;
const MAGIC_ENCODING = 'US-ASCII';

// const MEGA_SD_FILL_BYTE = 0xFF; // "Old style" Mega SD files are byte expanded with a fill byte of 0xFF
const RAW_FILL_BYTE = 0x00;

export default class GenesisMegaSdGenesisFlashCartSaveData {
  static createFromFlashCartData(flashCartArrayBuffer) {
    try { // eslint-disable-line import/no-named-as-default, import/no-named-as-default-member
      Util.checkMagic(flashCartArrayBuffer, MAGIC_OFFSET, MAGIC, MAGIC_ENCODING);
    } catch (e) {
      // No magic at the start of the file, so check if we're a save in the "old style"

      if (GenesisUtil.isByteExpanded(flashCartArrayBuffer) && MathUtil.isPowerOf2(flashCartArrayBuffer.byteLength)) {
        // Here we know we're being passed a file that's byte-expanded with 0xFF

        const rawArrayBuffer = GenesisUtil.changeFillByte(flashCartArrayBuffer, RAW_FILL_BYTE);

        return new GenesisMegaSdGenesisFlashCartSaveData(flashCartArrayBuffer, rawArrayBuffer);
      }

      throw new Error('This does not appear to be a Mega SD Genesis save file');
    }

    // Here we know we have the correct magic at the start of the file, so check that everything else looks good
    // (We maybe should put this code in the try block above for clarity, but then we need a better except handler to
    // catch a specific error with the magic otherwise any typo here or unexpected data would result in us going to the except block)

    if ((flashCartArrayBuffer.byteLength > MAGIC.length) && MathUtil.isPowerOf2(flashCartArrayBuffer.byteLength - MAGIC.length)) {
      return new GenesisMegaSdGenesisFlashCartSaveData(flashCartArrayBuffer, GenesisUtil.byteExpand(flashCartArrayBuffer.slice(MAGIC.length), RAW_FILL_BYTE));
    }

    throw new Error('This does not appear to be a Mega SD Genesis save file');
  }

  static createFromRawData(rawArrayBuffer) {
    // Remember that we may be given data in the Retrode style, with repeated bytes, or in the
    // Mega Everdrive Pro/emulator-style file (filled with 0x00 instead)

    if (!GenesisUtil.isByteExpanded(rawArrayBuffer) || !MathUtil.isPowerOf2(rawArrayBuffer.byteLength)) {
      throw new Error('This does not appear to be a raw Genesis save file');
    }

    const textEncoder = new TextEncoder(MAGIC_ENCODING);
    const magicArrayBuffer = Util.bufferToArrayBuffer(textEncoder.encode(MAGIC));

    const flashCartArrayBuffer = Util.concatArrayBuffers([magicArrayBuffer, GenesisUtil.byteCollapse(rawArrayBuffer)]);

    return new GenesisMegaSdGenesisFlashCartSaveData(flashCartArrayBuffer, rawArrayBuffer);
  }

  static createWithNewSize(flashCartSaveData, newSize) {
    const newRawSaveData = SaveFilesUtil.resizeRawSave(flashCartSaveData.getRawArrayBuffer(), newSize); // Note that we're resizing the raw save here, which has a fill byte of 0x00, so it's okay to pad with zeros via this function

    return GenesisMegaSdGenesisFlashCartSaveData.createFromRawData(newRawSaveData);
  }

  static getFlashCartFileExtension() {
    return 'SRM';
  }

  static getRawFileExtension() {
    return null;
  }

  static requiresRomClass() {
    return null;
  }

  static adjustOutputSizesPlatform() {
    return 'genesis';
  }

  constructor(flashCartArrayBuffer, rawArrayBuffer) {
    this.flashCartArrayBuffer = flashCartArrayBuffer;
    this.rawArrayBuffer = rawArrayBuffer;
  }

  getRawArrayBuffer() {
    return this.rawArrayBuffer;
  }

  getFlashCartArrayBuffer() {
    return this.flashCartArrayBuffer;
  }
}
